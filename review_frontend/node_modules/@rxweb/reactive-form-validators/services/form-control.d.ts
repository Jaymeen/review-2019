import { FormControl, ValidatorFn, AsyncValidatorFn } from "@angular/forms";
import { DataSanitizer } from '../core/validator.interface';
export declare class RxFormControl extends FormControl {
    private entityObject;
    private baseObject;
    private _sanitizers;
    private keyName;
    private _errorMessage;
    private _errorMessages;
    private _disableProvider;
    private _columns;
    private _childColumns;
    private _parentColumns;
    private _refDisableControls;
    private _refMessageControls;
    private _messageExpression;
    private _isPassedExpression;
    private _controlProp;
    readonly errorMessages: string[];
    readonly errorMessage: string;
    constructor(formState: any, validator: ValidatorFn | ValidatorFn[] | null, asyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null, entityObject: {
        [key: string]: any;
    }, baseObject: {
        [key: string]: any;
    }, controlName: string, _sanitizers: DataSanitizer[]);
    setValue(value: any, options?: {
        dirty?: boolean;
        updateChanged?: boolean;
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    getControlValue(): any;
    bindError(): void;
    markAsTouched(opts?: {
        onlySelf?: boolean;
    }): void;
    markAsUntouched(opts?: {
        onlySelf?: boolean;
    }): void;
    markAsDirty(opts?: {
        onlySelf?: boolean;
    }): void;
    markAsPristine(opts?: {
        onlySelf?: boolean;
    }): void;
    markAsPending(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    runControlPropChangeExpression(propNames: string[]): void;
    refresh(): void;
    private executeExpressions;
    private getMessageExpression;
    private getSanitizedValue;
    private bindConditionalControls;
    private setControlErrorMessages;
    private getErrorMessage;
    private processExpression;
    private executeExpression;
}
